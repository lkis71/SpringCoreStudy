1. 의존관계 자동 주입
    1) 생성자 주입
        - final 키워드를 사용하여 외부에서 변경할 수 없도록 한다.
        - 대부분의 의존관계 주입은 한 번 일어나면 애플리케이션 종료시점까지 의존관계를 변경할 일 없다.
        - 수정자 주입을 사용하게 되면 set메서드를 public으로 열어두어야 한다.
        - 생성자가 하나만 존재하면 @Autowired를 사용하지 않아도 컴포넌트 스캔시 자동으로 의존관계가 설정된다.
        - 생성자가 여러개 존재하면 컴포넌트 스캔시 어떤 생성자에 의존관계를 주입해야할지 알 수 없어 @Autowired를 사용한다.

    2) 수정자주입
        - set메서드를 활용해 주입한다.

    3) 필드주입
        - 사용을 지양한다. (외부에서 변경가능)


2. 조회 대상 빈이 여러 개인 경우 해결 방법
    1) @Autowired 필드 명 매칭
        - 기본적으로 의존관계 주입 시 '타입 매칭' 시도
            -> 여러 빈(매칭 결과가 여러 개)이 있으면 필드명이나 파라미터명으로 빈 이름을 매칭한다.

    2) @Quilifier끼리 매칭
        - 추가 구분자를 붙여주는 방법, 주입시 추가적인 방법을 제공하는 것이지 빈 이름을 변경하는 것은 아니다.
        - 구분자를 못찾을 경우, @Autowired와 같이 필드명이나 파라미터명으로 빈 이름을 매칭한다.
            -> 매칭 안될 경우 에러

    3) @Primary 사용
        - 여러 빈이 매칭 시 우선권을 가진 빈(@Primary)을 매칭한다.

    4) 우선순위
        - @Quilifier, @Primary 중 우선순위는 상세히 매칭시킬 수 있는 @Quilifier가 우선순위를 갖는다.

3. 싱글톤 방식의 주의점
    1) 무상태로 설계한다.
        - 특정 클라이언트에 의존적인 필드가 있으면 안된다.
        - 특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안된다.
        - 가급적 읽기만 가능해야한다.
        - 필드(인스턴스 변수) 대신 자바에서 공유되지 않는, 지역변수, 파라미터, ThreadLocal 등을 사용해야 한다.

4. 자동, 수동 의존관계 주입의 올바른 운영 기준ㅜㄷ
    - 애플리케이션은 크게 업무로직과 기술지원 로직으로 나뉜다.
    - 업무 로직 빈: 컨트롤러, 서비스, 레포지토리
        -> 숫자가 매우 많고, 유사한 패턴이 있다.
        -> 자동으로 빈을 주입한다.
    - 기술 지원 빈: 기술적인 문제나 공통 관심사(AOP)를 처리할 때 주로 사용
        -> 수가 적고, 애플리케이션 전반에 걸쳐서 광범위하다.
        -> 가급적 수동으로 빈을 주입한다.
        -> 비지니스 로직에서 다형성을 적극 활용할 때 사용한다. (특정 패키지에 같이 묶어 두는 게 좋다)

5. 빈 생명주기
    - 객체를 생성 후 의존관계 주입
    - 의존관계 주입이 모두 완료된 시점
        -> 스프링 빈에게 콜백 메서드를 통해서 초기화 시점을 알려주는 다양한 방법이 있다.
    - 스프링 컨테이너 생성 -> 스프링 빈 생성 -> 의존관계 주입 -> 초기화 콜백(빈의 의존관계 주입이 완료 된 후) -> 사용 -> 소멸전 콜백(빈이 소멸되기 직전) -> 스프링 종료

6. 빈 스코프
    - 싱글톤 스코프: 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프
        -> 스프링 컨테이너가 생성된 빈을 관리한다.
    - 프로토타입 스코프: 빈의 생성과 의존관계 주입까지만 관여하는 매우 짧은 범위의 스코프
        -> 스프링 컨테이너는 생성된 프로토타입 빈을 관리하지 않는다.
        -> 책임을 클라이언트에 있다.
        -> @PreDestroy 같은 종료 메서드가 호출되지 않는다.
    - 웹관련 스코프
        -> request: 웹 요청이 들어오고 나갈때 까지 유지되는 스코프
        -> session: 웹 세션이 생성되고 종료될때 까지 유지되는 스코프
        -> application: 웹의 서블릿 컨텍스트와 같은 범위로 유지되는 스코프